// Copyright 2012 - 2013 The Probab Authors. All rights reserved. See the LICENSE file.

package stat

/*

        np1 <- length( mu.raw )
        n <- np1 - 1
        mu.central <- rep( 0, np1 )
        mu.central[1] <- 1
        eta <- mu.raw[2]
        j <- 2
        for ( k in 1:n ) {
            total <- 0
            for ( i in 0:k ) {
                total <- total + choose(k,i) * ( (- eta )^(k-i) ) * mu.raw[i+1]
            }
            mu.central[j] <- total
            j <- j + 1
        }
        return( mu.central )
    */

// RawToCentral returns 
func RawToCentral(x []float64) []float64 {


	np1 := float64(len( mu.raw ))
        n :=  len( mu.raw ) - 1
        mu.central := make ([float64, len (mu.raw ))
        mu.central[0] = 1
        eta :=  mu.raw[1]
        j :=1
        for  k :=0, k < n; k++ {
              total :=0 
        		for  i :=0, i < k; i++ {
                total += choose(k,i) * ( (- eta )^(k-i) ) * mu.raw[i+1]  // ToDo
            }

ETC....

}
